# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Manim Community Dev Team
# This file is distributed under the same license as the Manim package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Manim \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-29 23:21+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/tutorials/configuration.rst:2
msgid "Configuration"
msgstr ""

#: ../../source/tutorials/configuration.rst:4
msgid "Manim provides an extensive configuration system that allows it to adapt to many different use cases.  The easiest way to do this is through the use of command line (or *CLI*) arguments."
msgstr ""

#: ../../source/tutorials/configuration.rst:10
msgid "Command Line Arguments"
msgstr ""

#: ../../source/tutorials/configuration.rst:12
msgid "Usually, manim is ran from the command line by executing"
msgstr ""

#: ../../source/tutorials/configuration.rst:18
msgid "This asks manim to search for a Scene class called :code:`SceneName` inside the file <file.py> and render it.  One can also specify the render quality by using the flags :code:`-ql`, :code:`-qm`, :code:`-qh`, or :code:`-qk`, for low, medium, high, and 4k quality, respectively."
msgstr ""

#: ../../source/tutorials/configuration.rst:27
msgid "Another frequent flag is :code:`-p`, which makes manim show the rendered video right after it's done rendering."
msgstr ""

#: ../../source/tutorials/configuration.rst:30
msgid "There are in fact many more command line flags that manim accepts.  All the possible flags are shown by the following command."
msgstr ""

#: ../../source/tutorials/configuration.rst:37
msgid "The output looks as follows."
msgstr ""

#: ../../source/tutorials/configuration.rst:121
msgid "For example, to render a scene in high quality, but only output the last frame of the scene instead of the whole video, you can execute"
msgstr ""

#: ../../source/tutorials/configuration.rst:128
msgid "The following example specifies the output file name (with the :code:`-o` flag), renders only the first ten animations (:code:`-n` flag) with a white background (:code:`-c` flag), and saves the animation as a .gif instead of as a .mp4 file (:code:`-i` flag).  It uses the default quality and does not try to open the file after it is rendered."
msgstr ""

#: ../../source/tutorials/configuration.rst:141
msgid "The config files"
msgstr ""

#: ../../source/tutorials/configuration.rst:143
msgid "As the last example shows, executing manim from the command line may involve using many flags at the same.  This may become a nuisance if you must execute the same file many times in a short time period, for example when making small incremental tweaks to your scene script.  For this purpose, manim can also be configured using a configuration file."
msgstr ""

#: ../../source/tutorials/configuration.rst:149
msgid "To use a configuration file when rendering your scene, you must create a file with name :code:`manim.cfg` in the same directory as your scene code."
msgstr ""

#: ../../source/tutorials/configuration.rst:152
msgid "The config file **must** be named :code:`manim.cfg`. Currently, manim does not support config files with any other name."
msgstr ""

#: ../../source/tutorials/configuration.rst:155
msgid "The config file must start with a section header, usually :code:`[CLI]`.  The configuration options under this header have the same name as the CLI flags, and serve the same purpose.  Take for example the following config file."
msgstr ""

#: ../../source/tutorials/configuration.rst:166
msgid "Executing :code:`manim <file.py> SceneName` on a directory that contains this config file is equivalent to executing"
msgstr ""

#: ../../source/tutorials/configuration.rst:173
msgid "on a directory that does not contain a config file."
msgstr ""

#: ../../source/tutorials/configuration.rst:175
msgid "The names of the configuration options admissible in config files are exactly the same as the **long names** of the corresponding command line flags.  For example, the :code:`-c` and :code:`--background_color` flags are interchangeable, but the config file only accepts :code:`background_color` as an admissible option."
msgstr ""

#: ../../source/tutorials/configuration.rst:181
msgid "Configuration options that do not have command line analogues will be ignored.  For a list of all the command line flags, see `Command Line Arguments`_."
msgstr ""

#: ../../source/tutorials/configuration.rst:185
msgid "Manim will look for a :code:`manim.cfg` config file in the same directory as the file being rendered, and **not** in the directory of execution.  For example,"
msgstr ""

#: ../../source/tutorials/configuration.rst:193
msgid "will use the config file found in :code:`path/to/SceneName`, if any.  It will **not** use the config file found in the current working directory, even if it exists.  In this way, the user may keep different config files for different scenes or projects, and execute them with the right configuration from anywhere in the system."
msgstr ""

#: ../../source/tutorials/configuration.rst:199
msgid "Config files will ignore any line that starts with a pound symbol :code:`#`."
msgstr ""

#: ../../source/tutorials/configuration.rst:204
msgid "The user config file"
msgstr ""

#: ../../source/tutorials/configuration.rst:206
msgid "As explained in the previous section, a :code:`manim.cfg` config file only affects the scene scripts in its same directory.  However, the user may also create a special config file that will apply to all scenes rendered by that user. This is referred to as the **user-wide** config file, and it will apply regardless of where manim is executed from, and regardless of where the scene script is stored."
msgstr ""

#: ../../source/tutorials/configuration.rst:213
msgid "The user-wide config file lives in a special folder, depending on the operating system."
msgstr ""

#: ../../source/tutorials/configuration.rst:216
msgid "Windows: :code:`UserDirectory`/AppData/Roaming/Manim/manim.cfg"
msgstr ""

#: ../../source/tutorials/configuration.rst:217
msgid "MacOS: :code:`UserDirectory`/config/manim/manim.cfg"
msgstr ""

#: ../../source/tutorials/configuration.rst:218
msgid "Linux: :code:`UserDirectory`/config/manim/manim.cfg"
msgstr ""

#: ../../source/tutorials/configuration.rst:220
msgid "Here, :code:`UserDirectory` is the user's home folder."
msgstr ""

#: ../../source/tutorials/configuration.rst:223
msgid "Config files that only apply to their own folder, explained in the previous section, are called **folder-wide** config files.  A user may have many folder-wide config files, one per folder, but only one **user-wide** config file.  Different users in the same computer may each have their own user-wide config file."
msgstr ""

#: ../../source/tutorials/configuration.rst:229
msgid "Do not store scene scripts in the same folder as the user-wide config file.  In this case, the behavior is undefined."
msgstr ""

#: ../../source/tutorials/configuration.rst:232
msgid "Whenever you use manim from anywhere in the system, manim will look for a user-wide config file and read its configuration."
msgstr ""

#: ../../source/tutorials/configuration.rst:237
msgid "Cascading config files"
msgstr ""

#: ../../source/tutorials/configuration.rst:239
msgid "What happens if you execute manim and it finds both a folder-wide config file and a user-wide config file?  Manim will read both files, but if they are incompatible, **the folder-wide file takes precedence**."
msgstr ""

#: ../../source/tutorials/configuration.rst:243
msgid "For example, take the following user-wide config file"
msgstr ""

#: ../../source/tutorials/configuration.rst:253
msgid "and the following folder-wide file"
msgstr ""

#: ../../source/tutorials/configuration.rst:261
msgid "Then, executing :code:`manim <file.py> SceneName` will be equivalent to not using any config files and executing"
msgstr ""

#: ../../source/tutorials/configuration.rst:268
msgid "Any command line flags have precedence over any config file.  For example, using the previous two config files and executing :code:`manim <file.py> SceneName -c RED` is equivalent to not using any config files and executing"
msgstr ""

#: ../../source/tutorials/configuration.rst:276
msgid "To summarize, the order of precedence for configuration options is: *user-wide config file < folder-wide config file < CLI flags*."
msgstr ""

#: ../../source/tutorials/configuration.rst:280
msgid "There is also a **library-wide** config file that determines manim's default behavior, and applies to every user of the library.  It has the least precedence, and **the user should not try to modify it**. Developers should receive explicit confirmation from the core developer team before modifying it."
msgstr ""
